<aura:component controller="IntegrationManager" implements="force:appHostable" >
    <aura:attribute name="sObjects" type="List"/>
    <aura:attribute name="relatedsObjects" type="List"/>
    <aura:attribute name="sObjectFields" type="List"/>
    <aura:attribute name="filteredsObjectFields" type="List"/>
    <aura:attribute name="endPoint" type="string"/>
    <aura:attribute name="method" type="string"/>
    <aura:attribute name="listViewName" type="string"/>
    <aura:attribute name="parentMetaDataId" type="string"/>
    <aura:attribute name="searchText" type="string"/>
    
    <aura:attribute name="sObjectAPI" type="string"/>
    <aura:attribute name="sObjectLabel" type="string"/>
    
    <aura:attribute name="sortBy" type="String" default="AttributeValue"/>
    <aura:attribute name="sortDirection" type="String" default="asc"/>
    
    <lightning:spinner aura:id="myspinner" alternativeText="Loading" size="medium" class="slds-hide"/>
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>	
    
    <div class="container">
        <div class="slds-align_absolute-center">
            <lightning:button variant="brand" label="Save" title="Save Details" onclick="{!c.saveMetaDataDetails}" disabled="{!empty(v.endPoint)}"/>
        </div>
        
        <fieldset class="clsFieldset">
            <legend class="clsLegend">
                <div class="slds-text-title_caps slds-text-color_success">{!$Label.c.Integration_Framework_Main_Section}</div>
            </legend>
            <div class="slds-grid slds-wrap">
                <div class="slds-col slds-size_1-of-2 slds-p-right_small">
                    <lightning:select aura:id="sObjectList" label="{!$Label.c.Integration_Framework_Select_Main_sObject}" onchange="{!c.getRelatedsObjectList}">
                        <option value="" text="--None--"/> 
                        <aura:iteration items="{!v.sObjects}" var="sObj">
                            <option value="{!sObj.value +'#'+ sObj.label}">{!sObj.label}</option>  
                        </aura:iteration>
                    </lightning:select>
                </div>
                <div class="slds-col slds-size_1-of-2 slds-p-left_small">
                    <lightning:input value="{!v.endPoint}" label="{!$Label.c.Integration_Framework_EndPoint}" placeholder="{!$Label.c.Integration_Framework_EndPoint_Placeholder}" onblur="{!c.getExistingDetails}"/>
                </div>
                <div class="slds-col slds-size_1-of-2 slds-p-right_small">
                    <lightning:input value="{!v.method}" label="{!$Label.c.Integration_Framework_Method}" placeholder="{!$Label.c.Integration_Framework_Method_Placeholder}"/>
                </div>
                <div class="slds-col slds-size_1-of-2 slds-p-left_small">
                    <lightning:input value="{!v.listViewName}" label="{!$Label.c.Integration_Framework_ListViewName}" placeholder="{!$Label.c.Integration_Framework_ListViewName_Placeholder}"/>
                </div>
            </div>
        </fieldset>
        
        <aura:if isTrue="{!not(empty(v.relatedsObjects))}">
            <div class="slds-p-top_small">
                <fieldset class="clsFieldset">
                    <legend class="clsLegend">
                        <div class="slds-text-title_caps slds-text-color_success">{!$Label.c.Integration_Framework_Mapping_Section}</div>
                    </legend>
                    
                    <div class="slds-grid slds-wrap">
                        <div class="slds-col slds-size_1-of-2 slds-p-right_small">
                            <lightning:select aura:id="childsObjectList" label="{!$Label.c.Integration_Framework_Select_Mapping_sObject}" onchange="{!c.getsObjectFieldList}">
                                <option value="" text="--None--"/> 
                                <aura:iteration items="{!v.relatedsObjects}" var="sObj">
                                    <option value="{!sObj.value}">{!sObj.label}</option>  
                                </aura:iteration>
                            </lightning:select>
                        </div>
                    </div>
                    
                    <aura:if isTrue="{!not(empty(v.sObjectFields))}">
                        <div class="slds-col slds-size_1-of-2 slds-p-right_small">
                            <lightning:input value="{!v.searchText}" label="{!$Label.c.Integration_Framework_Filter_Box}" placeholder="{!$Label.c.Integration_Framework_Filter_Box_Placeholder}" onchange="{!c.filterData}"/>
                        </div>
                        <div class="attributeContainer slds-p-top_small">
                            <table class="slds-table slds-table_bordered table_sortable-cols slds-table_striped">
                                <thead>
                                    <tr class="slds-text-title_caps">
                                        <th class="{!'slds-is-sortable' + if(v.sortBy == 'fieldAPI', ' slds-is-sorted slds-is-sorted_' + v.sortDirection)}" 
                                            data-column-name="fieldAPI" 
                                            onclick="{!c.handleSorting}" 
                                            scope="col">
                                            <a class="slds-th__action slds-text-link--reset" tabindex="0">
                                                <span class="slds-assistive-text">Sort</span>
                                                <span class="slds-truncate" title="fieldAPI">Field API</span>
                                                <lightning:icon iconName="utility:arrowup" size="x-small" class="slds-icon slds-is-sortable__icon" />
                                            </a>
                                        </th>
                                        <th class="{!'slds-is-sortable' + if(v.sortBy == 'attributeValue', ' slds-is-sorted slds-is-sorted_' + v.sortDirection)}" 
                                            data-column-name="attributeValue" 
                                            onclick="{!c.handleSorting}" 
                                            scope="col">
                                            <a class="slds-th__action slds-text-link--reset" tabindex="0">
                                                <span class="slds-assistive-text">Sort</span>
                                                <span class="slds-truncate" title="attributeValue">External Attribute</span>
                                                <lightning:icon iconName="utility:arrowup" size="x-small" class="slds-icon slds-is-sortable__icon" />
                                            </a>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <aura:iteration items="{!v.filteredsObjectFields}" var="item">
                                        <tr>
                                            <td>
                                                <lightning:input disabled="true" value="{!item.fieldAPI}" label="hidden" variant="label-hidden"/>
                                            </td>
                                            <td>
                                                <lightning:input value="{!item.attributeValue}" label="hidden" variant="label-hidden"/>
                                            </td>
                                        </tr>
                                    </aura:iteration>
                                </tbody>
                            </table>
                        </div>
                    </aura:if>
                </fieldset>
                <div class="slds-align_absolute-center slds-p-top_small">
                    <lightning:button variant="brand" label="Save" title="Save Details" onclick="{!c.saveMetaDataDetails}" disabled="{!empty(v.endPoint)}"/>
                </div>
            </div>
        </aura:if>
    </div>
</aura:component>




({
	doInit : function(component, event, helper) {
        helper.getsObjectListJS(component);
    },
    
    getRelatedsObjectList : function(component, event, helper) {
        helper.getRelatedsObjectListJS(component);
    },
    
    getsObjectFieldList : function(component, event, helper) {
        helper.getsObjectFieldListJS(component);
    },
    
    getExistingDetails : function(component, event, helper) {
        var endPoint = component.get("v.endPoint");
        if(endPoint) {
        	helper.getExistingDetailsJS(component);    
        }
    },
    
    filterData : function(component, event, helper) {
        helper.filterDataJS(component);
    },
    
    saveMetaDataDetails : function(component, event, helper) {
    	helper.saveMetaDataDetailsJS(component);
    },
    
    handleSorting : function(component, event, helper) {
        helper.handleSortingJS(component, event);
    }
})











({
    getsObjectListJS : function(component) {
        //show loading symbol
        var spinner;
        window.setTimeout(
            $A.getCallback(function() {
                spinner = component.find("myspinner");
                $A.util.removeClass(spinner, "slds-hide");
            }), 500
        );
        
        var action = component.get("c.getsObjects");
        action.setCallback(this, function(response) {
            var state = response.getState();
            var result = response.getReturnValue();
            console.log('==state==',state,'==result==',result);
            
            if(state === "SUCCESS") {
                component.set("v.sObjects", result);    
            } else {
                this.showToast("ERROR!", "error", response.getError());
            }
            $A.util.addClass(spinner, "slds-hide");
        });
        $A.enqueueAction(action); 
    },
    
    getRelatedsObjectListJS : function(component) {
        var spinner = component.find("myspinner");
        $A.util.removeClass(spinner, "slds-hide");
        
        component.set("v.sObjectFields", null); 
        
        var sObjectAPI_Label = component.find("sObjectList").get("v.value");
        var sObjectAPI = sObjectAPI_Label.split("#")[0];
        var sObjectLabel = sObjectAPI_Label.split("#")[1];
        component.set("v.sObjectAPI", sObjectAPI);    
        component.set("v.sObjectLabel", sObjectLabel); 
        
        console.log('==sObjectAPI==',sObjectAPI,'==sObjectLabel==',sObjectLabel);
        
        var action = component.get("c.getRelatedsObjects");
        action.setParams({
            "sObjectAPI" : sObjectAPI
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            var result = response.getReturnValue();
            console.log('==state==',state,'==result==',result);
            
            if(state === "SUCCESS") {
                component.set("v.relatedsObjects", result);   
            }
            else {
                this.showToast("ERROR!", "error", response.getError());
            }
            $A.util.addClass(spinner, "slds-hide");
        });
        $A.enqueueAction(action); 
    },
    
    getsObjectFieldListJS : function(component) {
        //show loading symbol
        var spinner = component.find("myspinner");
        $A.util.removeClass(spinner, "slds-hide");
        
        var sObjectAPI_Label = component.find("childsObjectList").get("v.value");
        var sObjectAPI = sObjectAPI_Label.split("#")[0];
        
        var action = component.get("c.getsObjectFields");
        action.setParams({
            "sObjectAPI" : sObjectAPI,
            "parentMetaDataId" : component.get("v.parentMetaDataId")
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            var result = response.getReturnValue();
            console.log('==state==',state,'==result==',result);
            
            if(state === "SUCCESS") {
                component.set("v.sObjectFields", result);
                component.set("v.filteredsObjectFields", result);   
            } else {
                this.showToast("ERROR!", "error", response.getError());
            }
            $A.util.addClass(spinner, "slds-hide");
        });
        $A.enqueueAction(action); 
    },
    
    getExistingDetailsJS : function(component) {
        //show loading symbol
        var spinner = component.find("myspinner");
        $A.util.removeClass(spinner, "slds-hide");
        
        component.set("v.method", null);    
        component.set("v.listViewName", null);        
        component.set("v.parentMetaDataId", null);
        
        var action = component.get("c.getExistingMetaData");
        action.setParams({
            "sObjectAPI" : component.get("v.sObjectAPI"),
            "endPoint" : component.get("v.endPoint")
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            var result = response.getReturnValue();
            console.log('==state==',state,'==result==',result);
            
            if(state === "SUCCESS") {
                if(result) {
                    component.set("v.method", result.method);    
                    component.set("v.listViewName", result.listViewName);        
                    component.set("v.parentMetaDataId", result.parentMetaDataId);    
                }
            } else {
                this.showToast("ERROR!", "error", response.getError());
            }
            $A.util.addClass(spinner, "slds-hide");
        });
        $A.enqueueAction(action); 
    },
    
    filterDataJS : function(component) {
		var searchText = component.get("v.searchText").toLowerCase() || '';
        var lstFieldWrapper = component.get("v.sObjectFields")        
        console.log('==searchText',searchText);
        var filteredsObjectFields = lstFieldWrapper.filter(row => row.fieldAPI.toLowerCase().indexOf(searchText) !== -1);
        console.log('==lstFieldWrapper==',filteredsObjectFields.length);
		component.set("v.filteredsObjectFields", filteredsObjectFields);   
    },
    
    saveMetaDataDetailsJS : function(component) {
        //show loading symbol
        var spinner = component.find("myspinner");
        $A.util.removeClass(spinner, "slds-hide");
        
        var action = component.get("c.saveMetaDataInfo");
        action.setParams({
            "sObjectAPI" : component.get("v.sObjectAPI"),
            "sObjectLabel" : component.get("v.sObjectLabel"),
            "endPoint" : component.get("v.endPoint"),
            "method" : component.get("v.method"),
            "listViewName" : component.get("v.listViewName")
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            var result = response.getReturnValue();
            console.log('==state==',state,'==result==',result);
            
            if(state === "SUCCESS") {
                if(result.includes("SUCCESS#")) {
                    this.saveMetaDataMappingsJS(component, result.split("#")[1]);
                } else {
                    this.showToast("ERROR!", "error", result);
                }
            } else {
                this.showToast("ERROR!", "error", response.getError());
            }
            $A.util.addClass(spinner, "slds-hide");
        });
        $A.enqueueAction(action); 
    },
    
    saveMetaDataMappingsJS : function(component, metaDataName) {
        console.log('==saveMetaDataMappingsJS==',metaDataName);
        //show loading symbol
        var spinner = component.find("myspinner");
        $A.util.removeClass(spinner, "slds-hide");
        
        var sObjectAPI_Label = component.find("childsObjectList").get("v.value");
        var sObjectAPI = sObjectAPI_Label.split("#")[0] || '';
        var sObjectLabel = sObjectAPI_Label.split("#")[1] || '';
        var lstFieldWrapper = component.get("v.filteredsObjectFields") || [];
        
        console.log('==sObjectAPI==',sObjectAPI);
        console.log('==sObjectLabel==',sObjectLabel);
        console.log('==metaDataName==',metaDataName);
        console.log('==lstFieldWrapper==',lstFieldWrapper);
        
        var action = component.get("c.saveMetaDataMappingsInfo");
        action.setParams({
            "sObjectAPI" : sObjectAPI,
            "sObjectLabel" : sObjectLabel,
            "metaDataName" : metaDataName,
            "lstFieldWrapper" : lstFieldWrapper
        });
        action.setCallback(this, function(response) {
            var state = response.getState();
            var result = response.getReturnValue();
            console.log('==state==',state,'==result==',result);
            
            if(state === "SUCCESS") {
                if(result.includes("SUCCESS")) {
                    this.showToast("SUCCESS!", "success", result);
                } else {
                    this.showToast("ERROR!", "error", result);
                }
            } else {
                this.showToast("ERROR!", "error", response.getError());
            }
            $A.util.addClass(spinner, "slds-hide");
        });
        $A.enqueueAction(action); 
    },
    
    //sort data list
    handleSortingJS : function(component, event) {
        var sortBy = event.currentTarget.dataset.columnName;
        var sortDirection = component.get("v.sortDirection");
        if(sortBy === component.get("v.sortBy")) {
            sortDirection = (sortDirection !== "asc") ? "asc" : "desc";    
        }
        else {
            sortDirection = "asc";
        }
        component.set("v.sortBy", sortBy);
        component.set("v.sortDirection", sortDirection);
        this.sortTableData(component, sortBy, sortDirection);
    },
    
    //sort data list
    sortTableData : function(component, fieldName, sortDirection){
        console.log('==fieldName==',fieldName,'==sortDirection==',sortDirection);
        var sObjectFields = component.get("v.filteredsObjectFields");
        //function to return the value stored in the field
        var key = function(row) {return row[fieldName];}
        var reverse = sortDirection == 'asc' ? 1: -1;
        
        sObjectFields.sort(function(a,b) {
            var a = key(a) ? key(a).toLowerCase() : '';//To handle null values , uppercase records during sorting
            var b = key(b) ? key(b).toLowerCase() : '';
            return reverse * ((a>b) - (b>a));
        });    
        
        //set sorted data to sObjectFields list
        component.set("v.filteredsObjectFields", sObjectFields);
    },
    
    //show toast message
    showToast : function(title, toastType, message, duration){
        var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({
            "title":title,
            "type":toastType,
            "message": message,
            "duration" : (duration) ? duration : 5000
        });
        toastEvent.fire(); 
    }
})
